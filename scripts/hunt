#!/bin/sh

main() {
  #| Environment
  set_defaults
  parse_arguments "$@"

  #| Initialization
  initialize_utils
  initialize_core

  #| Core
  if [ "$_debug" -ge 2 ]; then
    print_env
  else
    execute_process
  fi
}

set_defaults() {
  _path="${PRJ_ROOT:-$PWD}"
  _limit=1
  _case="insensitive"
  _debug=0
  _debug_max=2
  _continue=0
  _direction="both"
  _position="first"
  _finder="fd"
}

parse_arguments() {
  #| Core Args
  for arg in "$@"; do
    case "$arg" in
    -h | --help)
      echo usage
      exit 0
      ;;
    -v | --version)
      echo version
      exit 0
      ;;
    --continue)
      _continue=1
      ;;
    -d | --debug | --verbose)
      _debug="$_debug_max"
      ;;
    -q | --quiet)
      _debug=0
      ;;
    --test | --dry-run)
      _debug="$_debug_max"
      _continue=1
      ;;
    esac
  done

  #| Command-line arguments
  while [ "$#" -gt 0 ]; do
    case "$1" in
    --path)
      [ "$2" ] && {
        _path="$2"
        shift
      }
      ;;
    -p | --pattern)
      [ "$2" ] && {
        _pattern="$2"
        shift
      }
      ;;
    --depth)
      [ "$2" ] && {
        _depth="$2"
        shift
      }
      ;;
    --ignore)
      [ "$2" ] && {
        _ignore="$_ignore $2"
        shift
      }
      ;;
    --ignore-file)
      [ "$2" ] && {
        parse_ignore_file "$2"
        shift
      }
      ;;
    --type)
      [ "$2" ] && {
        _type="$2"
        shift
      }
      ;;
    --direction)
      [ "$2" ] && {
        case "$2" in
        "u*") _direction="up" ;;
        "d*") _direction="down" ;;
        "b*") _direction="both" ;;
        esac
        shift
      }
      ;;
    --position)
      [ "$2" ] && {
        case "$2" in
        "f*" | "s*" | "h*") _position="first" ;;
        "l*" | "e*" | "t*") _position="last" ;;
        esac
        shift
      }
      ;;
    --limit)
      [ "$2" ] && {
        case "$2" in
        '' | *[!0-9]*)
          [ "$_debug" -gt 0 ] &&
            printf "ERROR: Invalid limit: %s, a number is expected\n" "$2"

          if [ "$_continue" ]; then
            [ "$_debug" -gt 1 ] && printf "Using default limit of %s" "$_limit"
          else
            exit 1
          fi
          ;;
        *) _limit="$2" ;;
        esac
        shift
      }
      ;;
    --gitignore)
      _gitignore="true"
      ;;
    --hidden)
      _hidden=true
      ;;
    --case-sensitive)
      _case="sensitive"
      ;;
    --no-ignore)
      _no_ignore=true
      ;;
    --debug)
      if [ "$2" ]; then
        _debug=$(printf "%s" "$2" | tr '[:lower:]' '[:upper:]')
        case "$2" in
        0 | "false" | "off") _debug=0 ;;
        1 | "true" | "on") _debug=1 ;;
        2 | "error") _debug=2 ;;
        -*)
          _debug="$_debug_max"
          shift
          ;;
        *)
          [ "$_debug" -gt 0 ] && printf "ERROR: Invalid debug level: %s\n" "$2"
          [ "$_continue" ] || exit 1
          _debug="$_debug_max"
          ;;
        esac
        shift
      else
        _debug="$_debug_max"
      fi
      ;;
    --test | --dry-run)
      _debug="$_debug_max"
      _continue=1
      ;;
    --check)
      _check=true
      unset debug
      ;;
    # -*)
    #   printf "ERROR: Unknown option: %s\n" "$1"
    #   exit 1
    #   ;;
    *)
      [ "$_pattern" ] || _pattern="$1"
      ;;
    esac
    shift
  done
}

initialize_utils() {
  parse_ignore_file() {
    [ -f "$1" ] || {
      printf "Ignore file not found: %s\n" "$1"
      exit 1
    }

    while IFS= read -r line || [ -n "$line" ]; do
      #> Ignore empty lines, comments and overrides
      case "$line" in
      \#* | "" | \!*) continue ;;
      */) line="${line%?}" ;;
      esac
      # Remove leading/trailing whitespace and quotes
      # TODO: make this nicer
      line=$(echo "$line" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' -e 's/^"//' -e 's/"$//')
      _ignore="$_ignore $line"
    done <"$1"

    #> Prune the list of ignore patterns
    _ignore="${_ignore#"${_ignore%%[![:space:]]*}"}"
  }

  opt() {
    option="$1"
    argument="$2"
    printf "%s %s" "$option" "$argument"
  }

  append_string() {
    while [ "$#" -gt 0 ]; do
      case "$1" in
      --old) old_str="$2" ;;
      --new) new_str="$2" ;;
      --delim) delim="$2" ;;
      esac
      shift
    done

    case "$old_str" in
    *"$new_str"*) return ;;
    *) old_str="${old_str}${delim}${new_str}" ;;
    esac

    printf "%s" "$old_str"
  }
}

initialize_core() {
  limiter() {
    case "$_position" in
    last) name="tail" ;;
    *) name="head" ;;
    esac

    cmd="$(printf "%s -n %s" "$name" "$_limit")"

    case "$1" in
    --debug) printf "%s" "$name" ;;
    *) printf "%s" "$cmd" ;;
    esac
  }

  finder() {
    finder__fd() {
      cmd="fd"

      finder__fd_pattern() {
        #| Pattern
        [ "$_pattern" ] && opt "--glob" "$_pattern"
      }

      #| Define type option for fd
      case "$_type" in
      x* | exe*) opts="--type executable" ;;
      l* | sym*) opts="--type symlink" ;;
      f*) opts="--type file" ;;
      d*) opts="--type directory" ;;
      e*) opts="--type empty" ;;
      s*) opts="--type socket" ;;
      p*) opts="--type pipe" ;;
      c*) opts="--type char-device" ;;
      b*) opts="--type block-device" ;;
      esac

      #TODO: Add Excludes
      [ "$_no_ignore" ] && opts="$opts --no-ignore"
      [ "$_depth" ] && opts="$opts --max-depth \"$_depth\""
      [ "$_hidden" ] && opts="$opts --hidden"
      [ "$_case" = "sensitive" ] && opts="$opts --case-sensitive"

      printf "fd %s %s %s" "$opts" "$(finder__fd_pattern)" "$_path" |
        tr -s '[:space:]'
    }

    finder__find() {
      #| Set Defaults
      [ "$_depth" ] || _depth=2

      finder__find_path() {
        opt "-L" "$_path"
      }

      finder__find_pattern() {
        #| Pattern
        [ "$_pattern" ] && case "$_case" in
        "sensitive") option="-name" ;;
        *) option="-iname" ;;
        esac

        opt "$option" "$_pattern"
      }

      finder__find_depth() {
        opt "-maxdepth" "$_depth"
      }

      finder__find_type() {
        case "$_type" in
        x* | exe*) _type="-type f -perm /111" ;; # Executable file
        l* | sym*) _type="-type l" ;;            # Symbolic link
        f*) _type="-type f" ;;                   # Regular file
        d*) _type="-type d" ;;                   # Directory
        e*) _type="-empty" ;;                    # Empty files or directories
        s*) _type="-type s" ;;                   # Socket
        p*) _type="-type p" ;;                   # Named pipe (FIFO)
        c*) _type="-type c" ;;                   # Character device
        b*) _type="-type b" ;;                   # Block device
        esac

        printf "%s" "$_type"
      }

      finder__find_ignore() {
        #| Excludes
        [ "$_no_ignore" ] && return

        # [ "$_hidden" ] || opts="$opts -not -path .*"
        # [ "$_hidden" ] || _ignore="$_ignore ."

        _ignore="$_ignore .git"
        parse_ignore_file "$_path/.gitignore"

        for ignore in $_ignore; do
          case "$ignore" in
          \#* | "" | \!*) continue ;;
          */) ignore="${ignore%?}" ;;
          esac

          ignore_patterns="$(
            append_string \
              --new "-not -path \"$ignore\"" \
              --old "$ignore_patterns" \
              --delim " "
          )"

          ignore_patterns="$(
            append_string \
              --new "-not -path \"*/$ignore/*\"" \
              --old "$ignore_patterns" \
              --delim " "
          )"
        done

        opts="$(
          append_string \
            --new "$ignore_patterns" \
            --old "$opts" \
            --delim " "
        )"

        printf "%s" "$opts"
      }

      #| Command
      cmd="$(
        printf "find %s %s %s %s %s %s" \
          "$(finder__find_path)" \
          "$(finder__find_depth)" \
          "$(finder__find_type)" \
          "$(finder__find_ignore)" \
          "$(finder__find_pattern)" \
          ""
      )"

      printf "%s" "$cmd" | tr -s '[:space:]'
    }

    finder__exe() {
      type "$_finder" >/dev/null 2>&1 || _finder="find"
      name="$_finder"

      case $_finder in
      "fd") cmd="$(finder__fd)" ;;
      "find") cmd="$(finder__find)" ;;
      esac

      case "$1" in
      --debug) printf "%s" "$name" ;;
      *) printf "%s" "$cmd" ;;
      esac
    } && finder__exe "$@"
  }

  executioner() {
    cmd="$(printf "%s | %s" "$(finder)" "$(limiter)")"

    case "$1" in
    --debug) printf "%s" "$cmd" ;;
    --run | *) eval "$cmd" ;;
    esac
  }
}

print_env() {
  printf "PATH: %s\n" "$_path"
  printf "PATTERN: %s\n" "$_pattern"
  printf "DEPTH: %s\n" "$_depth"
  printf "TYPE: %s\n" "$_type"
  printf "LIMIT: %s\n" "$_limit"
  printf "IGNORE: %s\n" "$_ignore"
  printf "HIDDEN: %s\n" "$_hidden"
  printf "CASE: %s\n" "$_case"
  printf "CHECK: %s\n" "$_check"
  printf "FINDER: %s\n" "$(finder --debug)"
  printf "LIMITER: %s\n" "$(limiter --debug)"
  printf "COMMAND: %s\n" "$(executioner --debug)"
  printf "\n"
  time executioner
}

execute_process() {
  if executioner >/dev/null 2>&1; then
    [ "$check" ] && return
    executioner 2>/dev/null
  else
    [ "$_debug" -gt 0 ] && printf "%s" "No results found"
    return 1
  fi
}

# main "$@"
main --test src --limit 10 --hidden
