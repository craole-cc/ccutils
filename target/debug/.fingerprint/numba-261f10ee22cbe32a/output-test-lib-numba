{"$message_type":"diagnostic","message":"doc list item overindented","code":{"code":"clippy::doc_overindented_list_items","explanation":null},"level":"warning","spans":[{"file_name":"types\\numba\\src\\config\\allocator.rs","byte_start":395,"byte_end":398,"line_start":9,"line_end":9,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"//!    is used globally across the entire program if this feature is enabled.","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::doc_overindented_list_items)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try using `  ` (2 spaces)","code":null,"level":"help","spans":[{"file_name":"types\\numba\\src\\config\\allocator.rs","byte_start":395,"byte_end":398,"line_start":9,"line_end":9,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"//!    is used globally across the entire program if this feature is enabled.","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"  ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: doc list item overindented\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mtypes\\numba\\src\\config\\allocator.rs:9:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m//!    is used globally across the entire program if this feature is enabled.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: try using `  ` (2 spaces)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(clippy::doc_overindented_list_items)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"types\\numba\\src\\core\\decimal\\output\\numeral.rs","byte_start":207,"byte_end":236,"line_start":8,"line_end":8,"column_start":5,"column_end":34,"is_primary":true,"text":[{"text":"\t\t\t\twrite!(f, \"{}\", rust_decimal)","highlight_start":5,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::uninlined_format_args)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"types\\numba\\src\\core\\decimal\\output\\numeral.rs","byte_start":219,"byte_end":219,"line_start":8,"line_end":8,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"\t\t\t\twrite!(f, \"{}\", rust_decimal)","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"rust_decimal","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"types\\numba\\src\\core\\decimal\\output\\numeral.rs","byte_start":221,"byte_end":235,"line_start":8,"line_end":8,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"\t\t\t\twrite!(f, \"{}\", rust_decimal)","highlight_start":19,"highlight_end":33}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mtypes\\numba\\src\\core\\decimal\\output\\numeral.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                write!(f, \"{}\", rust_decimal)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(clippy::uninlined_format_args)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                write!(f, \"{}\"\u001b[0m\u001b[0m\u001b[38;5;9m, rust_decimal\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                write!(f, \"{\u001b[0m\u001b[0m\u001b[38;5;10mrust_decimal\u001b[0m\u001b[0m}\")\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"types\\numba\\src\\core\\decimal\\output\\numeral.rs","byte_start":311,"byte_end":339,"line_start":11,"line_end":11,"column_start":32,"column_end":60,"is_primary":true,"text":[{"text":"\t\t\tSelf::Large(big_decimal) => write!(f, \"{}\", big_decimal),","highlight_start":32,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"types\\numba\\src\\core\\decimal\\output\\numeral.rs","byte_start":323,"byte_end":323,"line_start":11,"line_end":11,"column_start":44,"column_end":44,"is_primary":true,"text":[{"text":"\t\t\tSelf::Large(big_decimal) => write!(f, \"{}\", big_decimal),","highlight_start":44,"highlight_end":44}],"label":null,"suggested_replacement":"big_decimal","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"types\\numba\\src\\core\\decimal\\output\\numeral.rs","byte_start":325,"byte_end":338,"line_start":11,"line_end":11,"column_start":46,"column_end":59,"is_primary":true,"text":[{"text":"\t\t\tSelf::Large(big_decimal) => write!(f, \"{}\", big_decimal),","highlight_start":46,"highlight_end":59}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mtypes\\numba\\src\\core\\decimal\\output\\numeral.rs:11:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self::Large(big_decimal) => write!(f, \"{}\", big_decimal),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            Self::Large(big_decimal) => write!(f, \"{}\"\u001b[0m\u001b[0m\u001b[38;5;9m, big_decimal\u001b[0m\u001b[0m),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            Self::Large(big_decimal) => write!(f, \"{\u001b[0m\u001b[0m\u001b[38;5;10mbig_decimal\u001b[0m\u001b[0m}\"),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"types\\numba\\src\\core\\decimal\\tests.rs","byte_start":226,"byte_end":271,"line_start":10,"line_end":10,"column_start":3,"column_end":48,"is_primary":true,"text":[{"text":"\t\tformat!(\"{}{}.{}\", sign, integer, fractional);","highlight_start":3,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"types\\numba\\src\\core\\decimal\\tests.rs","byte_start":236,"byte_end":236,"line_start":10,"line_end":10,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"\t\tformat!(\"{}{}.{}\", sign, integer, fractional);","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"sign","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"types\\numba\\src\\core\\decimal\\tests.rs","byte_start":238,"byte_end":238,"line_start":10,"line_end":10,"column_start":15,"column_end":15,"is_primary":true,"text":[{"text":"\t\tformat!(\"{}{}.{}\", sign, integer, fractional);","highlight_start":15,"highlight_end":15}],"label":null,"suggested_replacement":"integer","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"types\\numba\\src\\core\\decimal\\tests.rs","byte_start":241,"byte_end":241,"line_start":10,"line_end":10,"column_start":18,"column_end":18,"is_primary":true,"text":[{"text":"\t\tformat!(\"{}{}.{}\", sign, integer, fractional);","highlight_start":18,"highlight_end":18}],"label":null,"suggested_replacement":"fractional","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"types\\numba\\src\\core\\decimal\\tests.rs","byte_start":243,"byte_end":249,"line_start":10,"line_end":10,"column_start":20,"column_end":26,"is_primary":true,"text":[{"text":"\t\tformat!(\"{}{}.{}\", sign, integer, fractional);","highlight_start":20,"highlight_end":26}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"types\\numba\\src\\core\\decimal\\tests.rs","byte_start":249,"byte_end":258,"line_start":10,"line_end":10,"column_start":26,"column_end":35,"is_primary":true,"text":[{"text":"\t\tformat!(\"{}{}.{}\", sign, integer, fractional);","highlight_start":26,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"types\\numba\\src\\core\\decimal\\tests.rs","byte_start":258,"byte_end":270,"line_start":10,"line_end":10,"column_start":35,"column_end":47,"is_primary":true,"text":[{"text":"\t\tformat!(\"{}{}.{}\", sign, integer, fractional);","highlight_start":35,"highlight_end":47}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mtypes\\numba\\src\\core\\decimal\\tests.rs:10:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        format!(\"{}{}.{}\", sign, integer, fractional);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        format!(\"{}{}.{}\"\u001b[0m\u001b[0m\u001b[38;5;9m, sign, integer, fractional\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        format!(\"{\u001b[0m\u001b[0m\u001b[38;5;10msign\u001b[0m\u001b[0m}{\u001b[0m\u001b[0m\u001b[38;5;10minteger\u001b[0m\u001b[0m}.{\u001b[0m\u001b[0m\u001b[38;5;10mfractional\u001b[0m\u001b[0m}\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"4 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: 4 warnings emitted\u001b[0m\n\n"}
